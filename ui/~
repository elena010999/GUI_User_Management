#!/usr/bin/env python3
import tkinter as tk
import ttkbootstrap as tb

from logic.helper_functions import get_all_users, get_all_groups
from logic.add_user import create_user
from logic.modify_user import modify_user
from logic.delete_user import delete_user
from logic.change_password import change_password
from logic.lock_unlock_user import lock_unlock_user
from logic.add_users_to_groups import add_user_to_group
from logic.list_users import list_users_shells

class UserManagerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Linux User Manager")
        self.root.geometry("1000x600")
        self.root.resizable(False, False)

        # Main frame
        main_frame = tb.Frame(root, padding=10, bootstyle="light")
        main_frame.pack(expand=True, fill="both")

        # Top frame: search + create user
        top_frame = tb.Frame(main_frame)
        top_frame.pack(fill="x", pady=10)

        tk.Label(top_frame, text="Search User:").pack(side="left", padx=(0,5))
        self.search_var = tk.StringVar()
        self.search_var.trace_add("write", lambda *args: self.update_user_list())
        search_entry = tk.Entry(top_frame, textvariable=self.search_var)
        search_entry.pack(side="left", padx=(0,10))

        create_btn = tb.Button(top_frame, text="Create New User", bootstyle="success", command=self.create_user)
        create_btn.pack(side="left")

        # Users list frame (scrollable)
        list_frame = tk.Frame(main_frame)
        list_frame.pack(fill="both", expand=True, pady=10)

        self.canvas = tk.Canvas(list_frame)
        self.scrollbar = tk.Scrollbar(list_frame, orient="vertical", command=self.canvas.yview)
        self.scrollable_frame = tk.Frame(self.canvas)

        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: self.canvas.configure(scrollregion=self.canvas.bbox("all"))
        )

        self.canvas.create_window((0,0), window=self.scrollable_frame, anchor="nw")
        self.canvas.configure(yscrollcommand=self.scrollbar.set)

        self.canvas.pack(side="left", fill="both", expand=True)
        self.scrollbar.pack(side="right", fill="y")

        self.user_buttons = {}
        self.update_user_list()

    def create_user(self):
        create_user()  # opens the popup from add_user.py
        self.update_user_list()  # refresh after creation

    def update_user_list(self):
        # Clear old widgets
        for widget in self.scrollable_frame.winfo_children():
            widget.destroy()

        all_users = get_all_users()
        search_text = self.search_var.get().lower()
        filtered_users = [u for u in all_users if search_text in u.lower()]

        for username in filtered_users:
            row_frame = tk.Frame(self.scrollable_frame)
            row_frame.pack(fill="x", pady=2)

            tk.Label(row_frame, text=username, width=20, anchor="w").pack(side="left", padx=5)

            tb.Button(row_frame, text="Modify", bootstyle="info", command=lambda u=username: self.modify_user(u)).pack(side="left", padx=2)
            tb.Button(row_frame, text="Delete", bootstyle="danger", command=lambda u=username: self.delete_user(u)).pack(side="left", padx=2)
            tb.Button(row_frame, text="Password", bootstyle="warning", command=lambda u=username: self.change_password(u)).pack(side="left", padx=2)
            tb.Button(row_frame, text="Lock/Unlock", bootstyle="secondary", command=lambda u=username: self.lock_unlock_user(u)).pack(side="left", padx=2)
            tb.Button(row_frame, text="Add to Group", bootstyle="success", command=lambda u=username: self.add_to_group([u])).pack(side="left", padx=2)

    # Wrapper methods to call logic modules and refresh list if needed
    def modify_user(self, username):
        modify_user(username)
        self.update_user_list()

    def delete_user(self, username):
        delete_user(username)
        self.update_user_list()

    def change_password(self, username):
        change_password(username)

    def lock_unlock_user(self, username):
        lock_unlock_user(username)
        self.update_user_list()

    def add_to_group(self, user_list):
        add_user_to_group(user_list)
        self.update_user_list()


if __name__ == "__main__":
    root = tb.Window(themename="flatly")
    app = UserManagerApp(root)
    root.mainloop()

